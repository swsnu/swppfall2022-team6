import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import Box from "@mui/material/Box";
import Slider from "@mui/material/Slider";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faBullhorn, faUser } from "@fortawesome/free-solid-svg-icons";

import Map, { PositionType } from "./../../components/Map/Map";
import AreaFeed from "../AreaFeed/AreaFeed";
import ReportModal from "../../components/ReportModal/ReportModal";
import MapSearch from "../../components/MapSearch/MapSearch";
import "./MainPage.scss";

const marks = [
    { value: 0, label: "0km" },
    { value: 25, label: "1km" },
    { value: 50, label: "2km" },
    { value: 75, label: "3km" },
    { value: 100, label: "4km" },
];

const initMarkPosition: PositionType = {
    lat: 37.44877599087201,
    lng: 126.95264777802309,
}; // 서울대 중심

function MainPage() {
    const [radius, setRadius] = useState<number>(50);
    const [openReport, setOpenReport] = useState<boolean>(false);
    const [markPosition, setMarkPosition] =
        useState<PositionType>(initMarkPosition);
    const [currPosition, setCurrPosition] =
        useState<PositionType>(initMarkPosition);
    const [address, setAddress] = useState<string>("");
    const navigate = useNavigate();

    const geocoder = new kakao.maps.services.Geocoder();

    useEffect(() => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition((position) => {
                setMarkPosition({
                    lat: position.coords.latitude,
                    lng: position.coords.longitude,
                });
                setCurrPosition({
                    lat: position.coords.latitude,
                    lng: position.coords.longitude,
                });
            });
        } else {
            console.log("Geolocation is not supported by this browser.");
        }
    }, []);

    useEffect(() => {
        geocoder.coord2RegionCode(
            currPosition.lng,
            currPosition.lat,
            (result, status) => {
                console.log(result);
                if (
                    status == kakao.maps.services.Status.OK &&
                    !!result[0].address_name
                ) {
                    setAddress(result[0].address_name);
                }
            }
        );
    }, [currPosition]);

    const onClickMyPageIcon = () => {
        navigate("/mypage");
    };
    const onChangeMapRadius = (event: Event, newValue: number | number[]) => {
        setRadius(newValue as number);
    };
    const onClickFindOutButton = () => {
        navigate("/areafeed");
    };
    const onClickReportButton = () => {
        setOpenReport(true);
    };

    return (
        <div className="MainPage">
            <div id="main-upper-container">
                <div id="mainimage-container">
                <svg width="110" height="50" viewBox="0 0 110 50" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="24.7253" cy="24.7253" r="24.7253" fill="#EDF9FF"/>
                <circle cx="32.4176" cy="34.6154" r="15.3846" fill="#FFF6D5"/>
                <path d="M38.8037 39.99C38.6597 39.99 38.5637 39.972 38.5157 39.936C38.4677 39.912 38.4077 39.834 38.3357 39.702L33.1337 30.216V39.558C33.1337 39.75 33.1157 39.87 33.0797 39.918C33.0437 39.966 32.9297 39.99 32.7377 39.99H31.0997C30.9197 39.99 30.8057 39.966 30.7577 39.918C30.7097 39.87 30.6857 39.75 30.6857 39.558V26.58C30.6857 26.376 30.7037 26.244 30.7397 26.184C30.7877 26.124 30.9197 26.094 31.1357 26.094H32.9177C33.0617 26.094 33.1577 26.112 33.2057 26.148C33.2537 26.184 33.3197 26.28 33.4037 26.436L38.5337 35.85V26.526C38.5337 26.346 38.5517 26.232 38.5877 26.184C38.6357 26.124 38.7497 26.094 38.9297 26.094H40.5497C40.7657 26.094 40.8917 26.124 40.9277 26.184C40.9637 26.244 40.9817 26.358 40.9817 26.526V39.486C40.9817 39.714 40.9577 39.852 40.9097 39.9C40.8617 39.96 40.7297 39.99 40.5137 39.99H38.8037ZM51.5039 38.586C51.0599 39.15 50.5259 39.57 49.9019 39.846C49.2899 40.134 48.6059 40.278 47.8499 40.278C47.0579 40.278 46.3619 40.134 45.7619 39.846C45.1739 39.558 44.6759 39.174 44.2679 38.694C43.8719 38.202 43.5719 37.632 43.3679 36.984C43.1639 36.336 43.0619 35.652 43.0619 34.932C43.0619 34.212 43.1579 33.528 43.3499 32.88C43.5539 32.232 43.8539 31.668 44.2499 31.188C44.6579 30.696 45.1619 30.312 45.7619 30.036C46.3619 29.748 47.0579 29.604 47.8499 29.604C48.6419 29.604 49.3379 29.748 49.9379 30.036C50.5379 30.324 51.0359 30.714 51.4319 31.206C51.8399 31.686 52.1459 32.25 52.3499 32.898C52.5539 33.534 52.6559 34.212 52.6559 34.932C52.6559 35.64 52.5539 36.312 52.3499 36.948C52.1579 37.572 51.8759 38.118 51.5039 38.586ZM47.8499 31.71C47.4539 31.71 47.1059 31.806 46.8059 31.998C46.5059 32.178 46.2539 32.418 46.0499 32.718C45.8579 33.018 45.7079 33.36 45.5999 33.744C45.5039 34.128 45.4559 34.524 45.4559 34.932C45.4559 35.34 45.5039 35.736 45.5999 36.12C45.7079 36.504 45.8579 36.852 46.0499 37.164C46.2539 37.464 46.5059 37.71 46.8059 37.902C47.1059 38.082 47.4539 38.172 47.8499 38.172C48.2579 38.172 48.6119 38.082 48.9119 37.902C49.2119 37.71 49.4579 37.464 49.6499 37.164C49.8539 36.852 50.0039 36.504 50.0999 36.12C50.1959 35.736 50.2439 35.34 50.2439 34.932C50.2439 34.536 50.1959 34.146 50.0999 33.762C50.0039 33.378 49.8539 33.036 49.6499 32.736C49.4579 32.424 49.2119 32.178 48.9119 31.998C48.6119 31.806 48.2579 31.71 47.8499 31.71ZM60.9079 33.258L58.8559 39.774C58.8319 39.87 58.8019 39.93 58.7659 39.954C58.7299 39.978 58.6459 39.99 58.5139 39.99H56.7859C56.6899 39.99 56.6179 39.978 56.5699 39.954C56.5219 39.93 56.4859 39.87 56.4619 39.774L53.3839 30.234C53.3239 30.054 53.3119 29.94 53.3479 29.892C53.3959 29.844 53.5219 29.82 53.7259 29.82H55.3819C55.5019 29.82 55.5799 29.832 55.6159 29.856C55.6639 29.88 55.6999 29.94 55.7239 30.036L57.6859 36.588L59.7019 30.036C59.7259 29.94 59.7559 29.88 59.7919 29.856C59.8279 29.832 59.9119 29.82 60.0439 29.82H61.7719C61.9039 29.82 61.9879 29.832 62.0239 29.856C62.0599 29.88 62.0899 29.94 62.1139 30.036L64.1299 36.588L66.0919 30.036C66.1159 29.94 66.1459 29.88 66.1819 29.856C66.2299 29.832 66.3139 29.82 66.4339 29.82H68.0899C68.2939 29.82 68.4139 29.844 68.4499 29.892C68.4979 29.94 68.4919 30.054 68.4319 30.234L65.3539 39.774C65.3299 39.87 65.2939 39.93 65.2459 39.954C65.1979 39.978 65.1259 39.99 65.0299 39.99H63.3019C63.1699 39.99 63.0859 39.978 63.0499 39.954C63.0139 39.93 62.9839 39.87 62.9599 39.774L60.9079 33.258ZM76.4357 39C76.1237 39.348 75.7097 39.63 75.1937 39.846C74.6777 40.074 74.1497 40.212 73.6097 40.26C73.3217 40.296 72.9917 40.302 72.6197 40.278C72.2597 40.254 71.9057 40.212 71.5577 40.152C71.2097 40.104 70.8917 40.044 70.6037 39.972C70.3157 39.912 70.0997 39.852 69.9557 39.792C69.8237 39.732 69.7397 39.672 69.7037 39.612C69.6677 39.564 69.6617 39.468 69.6857 39.324L69.8657 37.578C69.8777 37.458 69.9017 37.386 69.9377 37.362C69.9857 37.338 70.0817 37.356 70.2257 37.416C70.4537 37.512 70.7117 37.602 70.9997 37.686C71.2997 37.758 71.5997 37.818 71.8997 37.866C72.2117 37.902 72.5117 37.926 72.7997 37.938C73.0997 37.95 73.3697 37.926 73.6097 37.866C74.1137 37.746 74.4737 37.548 74.6897 37.272C74.9057 36.996 75.0137 36.6 75.0137 36.084C75.0137 35.976 74.9897 35.85 74.9417 35.706C74.8937 35.562 74.8037 35.406 74.6717 35.238C74.5397 35.058 74.3597 34.872 74.1317 34.68C73.9157 34.488 73.6337 34.284 73.2857 34.068C72.6257 33.66 72.0617 33.282 71.5937 32.934C71.1377 32.586 70.7597 32.244 70.4597 31.908C70.1717 31.56 69.9557 31.206 69.8117 30.846C69.6797 30.486 69.6137 30.09 69.6137 29.658C69.6137 29.118 69.7217 28.62 69.9377 28.164C70.1657 27.696 70.4717 27.294 70.8557 26.958C71.2517 26.61 71.7137 26.34 72.2417 26.148C72.7697 25.956 73.3397 25.86 73.9517 25.86C74.5637 25.86 75.0857 25.908 75.5177 26.004C75.9617 26.088 76.3277 26.196 76.6157 26.328C76.7717 26.4 76.8557 26.46 76.8677 26.508C76.8917 26.556 76.8917 26.646 76.8677 26.778L76.5257 28.308C76.5017 28.416 76.4597 28.482 76.3997 28.506C76.3397 28.53 76.2197 28.512 76.0397 28.452C75.4757 28.272 74.9537 28.164 74.4737 28.128C74.0057 28.092 73.5977 28.134 73.2497 28.254C72.9017 28.374 72.6257 28.566 72.4217 28.83C72.2297 29.082 72.1337 29.406 72.1337 29.802C72.1337 30.09 72.2597 30.384 72.5117 30.684C72.7757 30.984 73.1957 31.308 73.7717 31.656C74.5037 32.112 75.1097 32.52 75.5897 32.88C76.0817 33.24 76.4717 33.594 76.7597 33.942C77.0477 34.278 77.2517 34.626 77.3717 34.986C77.4917 35.334 77.5517 35.724 77.5517 36.156C77.5517 36.732 77.4497 37.254 77.2457 37.722C77.0537 38.19 76.7837 38.616 76.4357 39ZM87.5403 35.292C87.5283 35.436 87.4923 35.55 87.4323 35.634C87.3843 35.706 87.2883 35.742 87.1443 35.742H81.5103C81.5943 36.546 81.8463 37.14 82.2663 37.524C82.6983 37.908 83.2083 38.112 83.7963 38.136C84.3483 38.16 84.8283 38.106 85.2363 37.974C85.6563 37.842 86.0583 37.656 86.4423 37.416C86.6103 37.308 86.7243 37.278 86.7843 37.326C86.8443 37.374 86.8743 37.5 86.8743 37.704V39.054C86.8743 39.186 86.8563 39.276 86.8203 39.324C86.7963 39.372 86.7303 39.438 86.6223 39.522C86.2743 39.762 85.8303 39.942 85.2903 40.062C84.7623 40.182 84.2403 40.242 83.7243 40.242C82.2843 40.242 81.1443 39.78 80.3043 38.856C79.4763 37.932 79.0623 36.618 79.0623 34.914C79.0623 34.278 79.1463 33.642 79.3143 33.006C79.4823 32.37 79.7523 31.8 80.1243 31.296C80.4963 30.78 80.9523 30.366 81.4923 30.054C82.0323 29.73 82.6743 29.568 83.4183 29.568C84.1743 29.568 84.8103 29.706 85.3263 29.982C85.8543 30.258 86.2803 30.63 86.6043 31.098C86.9403 31.566 87.1803 32.112 87.3243 32.736C87.4683 33.348 87.5403 34.002 87.5403 34.698V35.292ZM83.4723 31.656C83.2203 31.656 82.9863 31.716 82.7703 31.836C82.5543 31.956 82.3623 32.112 82.1943 32.304C82.0383 32.496 81.9003 32.718 81.7803 32.97C81.6603 33.222 81.5823 33.486 81.5463 33.762H85.2003C85.2003 33.522 85.1583 33.276 85.0743 33.024C85.0023 32.772 84.8943 32.55 84.7503 32.358C84.6183 32.154 84.4443 31.986 84.2283 31.854C84.0123 31.722 83.7603 31.656 83.4723 31.656ZM97.3489 35.292C97.3369 35.436 97.3009 35.55 97.2409 35.634C97.1929 35.706 97.0969 35.742 96.9529 35.742H91.3189C91.4029 36.546 91.6549 37.14 92.0749 37.524C92.5069 37.908 93.0169 38.112 93.6049 38.136C94.1569 38.16 94.6369 38.106 95.0449 37.974C95.4649 37.842 95.8669 37.656 96.2509 37.416C96.4189 37.308 96.5329 37.278 96.5929 37.326C96.6529 37.374 96.6829 37.5 96.6829 37.704V39.054C96.6829 39.186 96.6649 39.276 96.6289 39.324C96.6049 39.372 96.5389 39.438 96.4309 39.522C96.0829 39.762 95.6389 39.942 95.0989 40.062C94.5709 40.182 94.0489 40.242 93.5329 40.242C92.0929 40.242 90.9529 39.78 90.1129 38.856C89.2849 37.932 88.8709 36.618 88.8709 34.914C88.8709 34.278 88.9549 33.642 89.1229 33.006C89.2909 32.37 89.5609 31.8 89.9329 31.296C90.3049 30.78 90.7609 30.366 91.3009 30.054C91.8409 29.73 92.4829 29.568 93.2269 29.568C93.9829 29.568 94.6189 29.706 95.1349 29.982C95.6629 30.258 96.0889 30.63 96.4129 31.098C96.7489 31.566 96.9889 32.112 97.1329 32.736C97.2769 33.348 97.3489 34.002 97.3489 34.698V35.292ZM93.2809 31.656C93.0289 31.656 92.7949 31.716 92.5789 31.836C92.3629 31.956 92.1709 32.112 92.0029 32.304C91.8469 32.496 91.7089 32.718 91.5889 32.97C91.4689 33.222 91.3909 33.486 91.3549 33.762H95.0089C95.0089 33.522 94.9669 33.276 94.8829 33.024C94.8109 32.772 94.7029 32.55 94.5589 32.358C94.4269 32.154 94.2529 31.986 94.0369 31.854C93.8209 31.722 93.5689 31.656 93.2809 31.656Z" fill="#3185E7"/>
                </svg>
                </div>
                {/* NowSee */}
                <button id="mypage-button" onClick={onClickMyPageIcon}>
                    <FontAwesomeIcon icon={faUser} size="2x" />
                </button>
            </div>
            <div id="main-container">
                <MapSearch
                    markPosition={markPosition}
                    setMarkPosition={setMarkPosition}
                />
                <div className="map-container">
                    <div id="map-label">
                        Select a location and find out real-time statistics
                    </div>
                    <Map initPosition={markPosition} radius={radius} />
                </div>
                <div id="lower-map-container">
                    <div className="radius-slider-container">
                        <p>Change Radius</p>
                        <Box sx={{ width: 300 }} id="radius-slider">
                            <Slider
                                key="radius-slider"
                                aria-label="Custom marks"
                                value={radius}
                                step={2.5}
                                min={0.01}
                                getAriaValueText={(value: number): string => {
                                    return `${value}km`;
                                }}
                                valueLabelDisplay="auto"
                                valueLabelFormat={(value: number): string => {
                                    return `${value / 25}km`;
                                }}
                                onChange={onChangeMapRadius}
                                marks={marks}
                            />
                        </Box>
                    </div>
                    <div className="findout-container">
                        <button
                            id="findout-button"
                            onClick={onClickFindOutButton}
                        >
                            {"Find out  >"}
                        </button>
                    </div>
                </div>
                <div id="bottom-container">
                    <span>{`Current location: ${address}`}</span>
                    <button id="report-button" onClick={onClickReportButton}>
                        <span>Report!</span>
                        {/* <FontAwesomeIcon icon={faBullhorn}/> */}
                    </button>
                </div>
            </div>
            <ReportModal
                openReport={openReport}
                setOpenReport={setOpenReport}
            />
        </div>
    );
}

export default MainPage;
